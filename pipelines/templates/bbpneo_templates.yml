.template release-version:
  script:
    - |
      echo "get release version for au and prod from ops repo..."
      eval $(ssh-agent -s)
      ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
      ssh-add -l
      ssh -T -o StrictHostKeyChecking=no git@ssh.git.tech.rz.db.de
      echo "IS_CRONJOB:$IS_CRONJOB"
      if [ $IS_CRONJOB == "true" ];
      then
        git clone git@ssh.git.tech.rz.db.de:cnp/bbpneo/02-ops/eks-deployment-helm-chart.git
        cd eks-deployment-helm-chart/helm-charts/values/
        # AU
        export DEPLOY_TEMPLATE_AU="bbpneo-dispatchercore-au.yaml"
        if [ -e $DEPLOY_TEMPLATE_AU ];
        then
          export RELEASE_VERSION_AU=$(yq '.dispatcherCore.releaseVersion' $DEPLOY_TEMPLATE_AU)
        fi
        echo "RELEASE_VERSION_AU:$RELEASE_VERSION_AU"
        # PROD
        export DEPLOY_TEMPLATE_PROD="bbpneo-dispatchercore-prod.yaml"
        if [ -e $DEPLOY_TEMPLATE_PROD ];
        then
          export RELEASE_VERSION_PROD=$(yq '.dispatcherCore.releaseVersion' $DEPLOY_TEMPLATE_PROD)
        fi
        echo "RELEASE_VERSION_PROD:$RELEASE_VERSION_PROD"
      else
        git clone git@ssh.git.tech.rz.db.de:cnp/bbpneo/bbpneo-ops.git
        # AU
        cd bbpneo-ops/bbpneo-iat/deployment/
        export DEPLOY_TEMPLATE_AU="${CI_PROJECT_NAME}/${CI_PROJECT_NAME}.yaml"
        if [ -e $DEPLOY_TEMPLATE_AU ];
        then
          export RELEASE_VERSION_AU=$(yq '(.spec.generators.0.matrix.generators.0.list.elements.[] | select(.environment == "au") .releaseVersion)' $DEPLOY_TEMPLATE_AU)
        fi
        echo "RELEASE_VERSION_AU:$RELEASE_VERSION_AU"
        # PROD
        cd ../../../bbpneo-ops/bbpneo-prod/deployment
        export DEPLOY_TEMPLATE_PROD="${CI_PROJECT_NAME}/${CI_PROJECT_NAME}-prod.yaml"
        if [ -e $DEPLOY_TEMPLATE_PROD ];
        then
          export RELEASE_VERSION_PROD=$(yq '.spec.source.helm.values' | grep 'releaseVersion' $DEPLOY_TEMPLATE_PROD | cut -d ":" -f2 | tr -dc '0-9.')
        fi
        echo "RELEASE_VERSION_PROD:$RELEASE_VERSION_PROD"
        cd ../../..
      fi

.template grant:
  script:
    - |
      cd ..
      echo "get moqap repo..."
      eval $(ssh-agent -s)
      ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
      ssh-add -l
      ssh -T -o StrictHostKeyChecking=no git@ssh.git.tech.rz.db.de
      git clone git@ssh.git.tech.rz.db.de:cnp/bbpneo/02-ops/moqap.git
      cd ${CI_PROJECT_NAME}


.template jmeter-run:
  script:
    - |
      echo "baseURL = ${BASE_SVC_URL}"
      echo "maxPage = ${NO_PAGES}"
      echo "noThreads = ${NO_THREADS}"
      echo "BIZHUB_ACTIVE = ${BIZHUB_ACTIVE}"
      echo "API_PATH = ${API_PATH}"
      
      export MQP_JMETER_CMMD_VAR="-JbaseURL=${BASE_SVC_URL} -JapiUsername=${API_USER} -JapiPasswort=${API_PASSWORD} -JnoThreads=${NO_THREADS} -JmaxPage=${NO_PAGES} --forceDeleteResultFile"
      
      if [ $BIZHUB_ACTIVE == 'true' ];
      then
         export MQP_JMETER_CMMD_VAR="-JbaseURL=${BIZHUB_URL} -JapiPath=${API_PATH}  -JclientID=${CLIENT_ID}  -JapiKey=${API_KEY}  -JnoThreads=${NO_THREADS} -JmaxPage=${NO_PAGES} --forceDeleteResultFile"
      fi
      
      mkdir -p ./artifacts/
      sed -i -e "s/REPLACE_ELASTIC_INDEX/$ES_INDEX/g" $MQP_JMETER_TESTCASE_PATH
      sed -i -e "s/REPLACE_ELASTIC_HOST/$ES_HOST/g" $MQP_JMETER_TESTCASE_PATH
      sed -i -e "s/REPLACE_ELASTIC_PORT/$ES_PORT/g" $MQP_JMETER_TESTCASE_PATH
      sed -i -e "s/REPLACE_ELASTIC_PROTOCOL/$ES_PROTOCOL/g" $MQP_JMETER_TESTCASE_PATH