---
include:
  - project: "moqap/modules"
    ref: "12.0.1"
    file:
      - "/artifactory/download_artifacts_dir.yml"
      - "/artifactory/stage_artifacts.yml"
  - "/pipelines/templates/moqap_templates.yml"
  - "/pipelines/templates/bbpneo_templates.yml"
  - "/pipelines/settings.yaml"
  - "/pipelines/trivy/trivy.yaml"
  - "/pipelines/stages/deployment.yaml"
  - "/pipelines/security/syft.yaml"
  - "/pipelines/security/grant.yaml"
  - "/pipelines/security/grype.yaml"
  - "/pipelines/defectDojo/defect-dojo.yaml"

.job_template: &job_template
  tags:
    - $PROJECT_RUNNER_TAG

variables:
  DEPLOY_ENV: "int"
  STAGE_ENV: "int"
  PROJECT_RUNNER_TAG: "eks-integration"

stages:
  - .pre
  - start-pipeline
  - get-release-version
  - find-jar
  - build-image
  - stage-artifacts
  - security-scan
  - argo-cd-deploy
  - report-upload
  - .post

Start Image Update Pipeline:
  stage: start-pipeline
  image: ${PROD_DOCKER_REPO}.bahnhub.tech.rz.db.de/basis-pipeline-image:version-3.3-multiarch
  <<: *job_template
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  == "development"
  variables:
    SECRETS:
      TRIGGER_TOKEN:${CI_PROJECT_NAME}_trigger_token,
      TRIGGER_URL:${CI_PROJECT_NAME}_trigger_url,
      SSH_PRIVATE_KEY:RUNNER_SSH_KEY
  script:
    - !reference [ .template secrets, script ]
    - !reference [ .template release-version, script ]
    - echo "Start Pipeline..."
    # AU
    - echo "Start Image Update Pipeline for AU"
    - curl -X POST -F token=$TRIGGER_TOKEN -F ref=Release-$RELEASE_VERSION_AU -F "variables[IMAGE_UPDATE]=true" -F "variables[DEPLOY_ENV]=\"au\"" -F "variables[STAGE_ENV]=\"au\"" -F "variables[PROJECT_RUNNER_TAG]=\"eks-abnahme\"" -F "variables[DEPLOY_TEMPLATE]=\"$DEPLOY_TEMPLATE_AU\"" -F "variables[IS_CRONJOB]=\"$IS_CRONJOB\"" $TRIGGER_URL
    # PROD
    #- echo "Start Image Update Pipeline for PROD"
    #- curl -X POST -F token=$TRIGGER_TOKEN -F ref=Release-$RELEASE_VERSION_PROD -F "variables[IMAGE_UPDATE]=true" -F "variables[DEPLOY_ENV]=\"prod\"" -F "variables[STAGE_ENV]=\"prod\"" -F "variables[PROJECT_RUNNER_TAG]=\"eks-produktion\"" -F "variables[DEPLOY_TEMPLATE]=\"$DEPLOY_TEMPLATE_PROD\"" -F "variables[IS_CRONJOB]=\"$IS_CRONJOB\"" $TRIGGER_URL

Get Release Version:
  stage: get-release-version
  image: ${PROD_DOCKER_REPO}.bahnhub.tech.rz.db.de/basis-pipeline-image:version-3.3-multiarch
  <<: *job_template
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
  variables:
    ARTIFACTORY_PATH: "$MAVEN_REPO/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/Release-*/*/int/*.jar"
    TARGET_DIR: "artifacts"
    SECRETS:
      SSH_PRIVATE_KEY:RUNNER_SSH_KEY
  script:
    - !reference [ .template secrets, script ]
    - !reference [ .template release-version, script ]
    - mkdir -p artifacts
    - echo $DEPLOY_ENV
    - |
      if [ $DEPLOY_ENV == "au" ];
      then
        export RELEASE_VERSION=$RELEASE_VERSION_AU
      fi
      if [ $DEPLOY_ENV == "prod" ];
      then
        export RELEASE_VERSION=$RELEASE_VERSION_PROD
      fi
    - echo $RELEASE_VERSION
    - echo "RELEASE_VERSION=$RELEASE_VERSION" >> build.env
  artifacts:
    reports:
      dotenv: build.env

Find JAR:
  stage: find-jar
  extends: .Download-Artifacts
  <<: *job_template
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
  variables:
    ARTIFACTORY_PATH: "$MAVEN_REPO/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/Release-*/*/int/*.jar"
    TARGET_DIR: "artifacts"
    SECRETS:
      ARTIFACTORY_USER:RUNNER_ARTIFACTORY_USER,
      ARTIFACTORY_PASSWORD:RUNNER_ARTIFACTORY_PASSWORD,
      SSH_PRIVATE_KEY:RUNNER_SSH_KEY
  before_script:
    - echo $RELEASE_VERSION
    - export ARTIFACTORY_PATH="$MAVEN_REPO/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/Release-$RELEASE_VERSION/*/int/*$RELEASE_VERSION.jar"
    - echo $ARTIFACTORY_PATH
  after_script:
    - echo $RELEASE_VERSION
    - find artifacts -name "*$RELEASE_VERSION.jar" -print -ls
    - mv -i $(find artifacts -name "*$RELEASE_VERSION.jar" -type f -exec ls -t1 {} + | head -1) artifacts
  artifacts:
    paths:
      - artifacts/*

Build Image AMD:
  stage: build-image
  image: ${PROD_DOCKER_REPO}.bahnhub.tech.rz.db.de/basis-pipeline-image:version-3.3-multiarch
  needs:
    - job: Find JAR
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
  tags:
    - ${PROJECT_RUNNER_TAG}
  artifacts:
    paths:
      - artifacts/*
  variables:
    STORAGE_DRIVER: vfs
    BUILDAH_FORMAT: docker
    BUILDAH_ISOLATION: chroot
    KANIKO_IMAGE_NAME: $CI_PROJECT_NAME
    KANIKO_SOURCE_REPO: ${PROD_DOCKER_REPO}
    MQP_BUILDA_REGISTRY_HOST: ${PROD_DOCKER_REPO}.bahnhub.tech.rz.db.de
    SECRETS:
      MQP_BUILDA_REGISTRY_USER:RUNNER_ARTIFACTORY_USER,
      MQP_BUILDA_REGISTRY_PASSWORD:RUNNER_ARTIFACTORY_PASSWORD
  script:
    - !reference [ .template secrets, script ]
    # Where to push to
    - export IMAGE="$CI_COMMIT_REF_NAME-$DEPLOY_ENV-$CI_COMMIT_SHORT_SHA-${CI_PIPELINE_CREATED_AT}"
    - export IMAGE=$(echo $IMAGE | tr ':' '.')
    #
    - buildah -v
    #
    # Login
    - echo "buildah login"
    - buildah login -u "$MQP_BUILDA_REGISTRY_USER" -p "$MQP_BUILDA_REGISTRY_PASSWORD" "$MQP_BUILDA_REGISTRY_HOST"
    #
    - buildah info
    #
    ## Add here your architectures. One build per architecture
    # Build container for amd64 (x86_64) and arm64 (aarch64). Add more architectures as needed
    - buildah images
    - echo "buildah build amd64"
    - buildah build --format docker -f "Dockerfile" --build-arg ARCH=amd64 --tag "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE-amd64" .
    - buildah images
    #
    - echo "buildah manifest push"
    - export MQP_BUILDA_REGISTRY_HOST=${DEV_DOCKER_REPO}.bahnhub.tech.rz.db.de
    - buildah login -u "$MQP_BUILDA_REGISTRY_USER" -p "$MQP_BUILDA_REGISTRY_PASSWORD" "$MQP_BUILDA_REGISTRY_HOST"
    - buildah push "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE-amd64"

Build Image ARM:
  stage: build-image
  #image: moqap-docker-release-beta-local.bahnhub.tech.rz.db.de/buildah-image:init
  image: ${PROD_DOCKER_REPO}.bahnhub.tech.rz.db.de/basis-pipeline-image:version-3.3-multiarch
  needs:
    - job: Find JAR
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
  tags:
    - arm64
  artifacts:
    paths:
      - artifacts/*
  variables:
    STORAGE_DRIVER: vfs
    BUILDAH_FORMAT: docker
    BUILDAH_ISOLATION: chroot
    KANIKO_IMAGE_NAME: $CI_PROJECT_NAME
    KANIKO_SOURCE_REPO: ${PROD_DOCKER_REPO}
    MQP_BUILDA_REGISTRY_HOST: ${PROD_DOCKER_REPO}.bahnhub.tech.rz.db.de
    SECRETS:
      MQP_BUILDA_REGISTRY_USER:RUNNER_ARTIFACTORY_USER,
      MQP_BUILDA_REGISTRY_PASSWORD:RUNNER_ARTIFACTORY_PASSWORD
  script:
    - !reference [ .template secrets, script ]
    # Where to push to
    - export IMAGE="$CI_COMMIT_REF_NAME-$DEPLOY_ENV-$CI_COMMIT_SHORT_SHA-${CI_PIPELINE_CREATED_AT}"
    - export IMAGE=$(echo $IMAGE | tr ':' '.')
    #
    - buildah -v
    #
    # Login
    - echo "buildah login"
    - buildah login -u "$MQP_BUILDA_REGISTRY_USER" -p "$MQP_BUILDA_REGISTRY_PASSWORD" "$MQP_BUILDA_REGISTRY_HOST"
    #
    - buildah info
    #
    ## Add here your architectures. One build per architecture
    # Build container for amd64 (x86_64) and arm64 (aarch64). Add more architectures as needed
    - buildah images
    - echo "buildah build arm64"
    #- buildah build --format docker -f "Dockerfile" --build-arg ARCH=arm64 --variant="v8" --tag "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE-arm64" .
    - buildah build --format docker -f "Dockerfile" --build-arg ARCH=arm64 --platform="linux/arm64/v8" --tag "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE-arm64" .
    - buildah images
    #
    - echo "buildah manifest push"
    - export MQP_BUILDA_REGISTRY_HOST=${DEV_DOCKER_REPO}.bahnhub.tech.rz.db.de
    - buildah login -u "$MQP_BUILDA_REGISTRY_USER" -p "$MQP_BUILDA_REGISTRY_PASSWORD" "$MQP_BUILDA_REGISTRY_HOST"
    - buildah push "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE-arm64"

Build Image Manifest:
  needs:
    - job: Build Image AMD
    - job: Build Image ARM
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
  stage: build-image
  image: ${PROD_DOCKER_REPO}.bahnhub.tech.rz.db.de/basis-pipeline-image:version-3.3-multiarch
  tags:
    - ${PROJECT_RUNNER_TAG}
  artifacts:
    paths:
      - artifacts/*
  variables:
    STORAGE_DRIVER: vfs
    BUILDAH_FORMAT: docker
    BUILDAH_ISOLATION: chroot
    KANIKO_IMAGE_NAME: $CI_PROJECT_NAME
    KANIKO_SOURCE_REPO: ${PROD_DOCKER_REPO}
    MQP_BUILDA_REGISTRY_HOST: ${DEV_DOCKER_REPO}.bahnhub.tech.rz.db.de
    SECRETS:
      MQP_BUILDA_REGISTRY_USER:RUNNER_ARTIFACTORY_USER,
      MQP_BUILDA_REGISTRY_PASSWORD:RUNNER_ARTIFACTORY_PASSWORD
  script:
    - !reference [ .template secrets, script ]
    - !reference [ .template secrets, script ]
    # Manifest name, can be anything
    - export MANIFEST="${CI_PROJECT_NAME}-multiarch"
    # Where to push to
    - export IMAGE="$CI_COMMIT_REF_NAME-$DEPLOY_ENV-$CI_COMMIT_SHORT_SHA-${CI_PIPELINE_CREATED_AT}"
    - export IMAGE=$(echo $IMAGE | tr ':' '.')
    #
    - buildah -v
    #
    # Login
    - echo "buildah login"
    - buildah login -u "$MQP_BUILDA_REGISTRY_USER" -p "$MQP_BUILDA_REGISTRY_PASSWORD" "$MQP_BUILDA_REGISTRY_HOST"
    #
    - set -x
    - buildah info
    # Create manifest
    - echo "buildah manifest create"
    - buildah manifest create "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE"
    #
    - echo "buildah manifest add"
    - buildah manifest add --arch amd64 "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE" "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE-amd64"
    - buildah manifest add --arch arm64 "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE" "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE-arm64"
    # Push the manifest, this will include all architectures you build for before
    - echo "buildah manifest push"
    - export MQP_BUILDA_REGISTRY_HOST=${DEV_DOCKER_REPO}.bahnhub.tech.rz.db.de
    - buildah login -u "$MQP_BUILDA_REGISTRY_USER" -p "$MQP_BUILDA_REGISTRY_PASSWORD" "$MQP_BUILDA_REGISTRY_HOST"
    - buildah manifest push --format v2s2 --all "cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE" "docker://cna-bbpneo-dev-docker-stage-local.bahnhub.tech.rz.db.de/${CI_PROJECT_NAME}:$IMAGE"





#Build Image Manifest:
#  extends: .kaniko-build
#  stage: build-image
#  needs:
#    - job: Find JAR
#  <<: *job_template
#  rules:
#    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
#  artifacts:
#    paths:
#      - artifacts/*
#  variables:
#    KANIKO_IMAGE_NAME: $CI_PROJECT_NAME
#    KANIKO_SOURCE_REPO: ${PROD_DOCKER_REPO}
#    KANIKO_IMAGE_TAG: "${CI_COMMIT_REF_NAME}-${DEPLOY_ENV}-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_CREATED_AT}"
#    SECRETS:
#      CI_REGISTRY_USER:RUNNER_ARTIFACTORY_USER,
#      CI_REGISTRY_PASSWORD:RUNNER_ARTIFACTORY_PASSWORD,
#  before_script:
#    - export KANIKO_IMAGE_TAG="${CI_COMMIT_REF_NAME}-${DEPLOY_ENV}-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_CREATED_AT}"
#    - export KANIKO_IMAGE_TAG=$(echo $KANIKO_IMAGE_TAG | tr ':' '.')
#    - echo $KANIKO_IMAGE_TAG
#    - echo $IMAGE_UPDATE
#    - echo $DEPLOY_ENV
#    - echo $STAGE_ENV
#    - echo $PROD_DOCKER_REPO
#    - echo $CI_REGISTRY

Promote stage Artifactory:
  extends: .Stage-Artifacts
  stage: stage-artifacts
  <<: *job_template
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
  variables:
    SOURCE_PATH: "$SOURCE_DOCKER_REPO"
    TARGET_PATH: "$TARGET_DOCKER_REPO"
    SOURCE_TAG: "$SOURCE_IMAGE_TAG"
    TARGET_TAG: "$TARGET_IMAGE_TAG"
    SECRETS:
      ARTIFACTORY_USER:RUNNER_ARTIFACTORY_USER,
      ARTIFACTORY_PASSWORD:RUNNER_ARTIFACTORY_PASSWORD
  before_script:
    - export ARTIFACT_NAME=$CI_PROJECT_NAME
    - export SOURCE_PATH=$DEV_DOCKER_REPO
    - export SOURCE_IMAGE_TAG=$(echo "$CI_COMMIT_REF_NAME-$DEPLOY_ENV-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_CREATED_AT" | tr ':' '.')
    - export SOURCE_TAG=$SOURCE_IMAGE_TAG
    - export TARGET_IMAGE_TAG=$(echo "$CI_COMMIT_REF_NAME-$DEPLOY_ENV-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_CREATED_AT" | tr ':' '.')
    - export TARGET_TAG=$TARGET_IMAGE_TAG
    - |
      if [ $DEPLOY_ENV == "au" ];
      then
        export TARGET_PATH=$AU_DOCKER_REPO
      fi
      if [ $DEPLOY_ENV == "prod" ];
      then
        export TARGET_PATH=$PROD_DOCKER_REPO
      fi
    - echo $ARTIFACT_NAME
    - echo $SOURCE_PATH
    - echo $TARGET_PATH
    - echo $ARTIFACTORY_URL
    - echo $ARTIFACTORY_USER
    - echo $OPTIONS
    - echo $SOURCE_IMAGE_TAG
    - echo $SOURCE_TAG
    - echo $TARGET_IMAGE_TAG
    - echo $TARGET_TAG

Print Variables:
  stage: start-pipeline
  tags:
    - $PROJECT_RUNNER_TAG
  image: ${PROD_DOCKER_REPO}.bahnhub.tech.rz.db.de/basis-pipeline-image:version-3.3-multiarch
  script:
    - echo $DEPLOY_ENV
    - echo $STAGE_ENV
    - echo $PROJECT_RUNNER_TAG
    - echo $VERSION_ENV
    - echo $BASE_SERVICE_URL
    - echo $SERVICE_URL
    - echo $STAGE
    - echo $KANIKO_IMAGE_TAG
    - echo $IS_CRONJOB
    - echo $IS_COMMONLIB
    - echo $DEPLOY_TEMPLATE
    - echo $IS_PYTHONJOB
