---
include:
  - project: "moqap/modules"
    ref: "11.2.2"
    file:
      - "/artifactory/download_artifacts_dir.yml"
      - "/eks/kaniko/kaniko.yml"
      - "/trivy/trivy.yml"
      - "/artifactory/stage_artifacts.yml"
  - "/pipelines/templates/moqap_templates.yml"
  - "/pipelines/templates/bbpneo_templates.yml"
  - "/pipelines/settings.yaml"
  - "/pipelines/trivy/trivy.yaml"
  - "/pipelines/stages/deployment.yaml"

.job_template: &job_template
  tags:
    - $PROJECT_RUNNER_TAG

variables:
  DEPLOY_ENV: "int"
  STAGE_ENV: "int"
  PROJECT_RUNNER_TAG: "eks-integration"

stages:
  - .pre
  - start-pipeline
  - find-jar
  - build-image
  - stage-artifacts
  - security-scan
  - argo-cd-deploy
  - .post

Start ReleasePipeline:
  stage: start-pipeline
  image: ${PROD_DOCKER_REPO}.bahnhub.tech.rz.db.de/basis-pipeline-image:version-3
  <<: *job_template
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  == "development"
  variables:
    SECRETS:
      TRIGGER_TOKEN:${CI_PROJECT_NAME}_trigger_token,
      SSH_PRIVATE_KEY:RUNNER_SSH_KEY
  script:
    - !reference [ .template secrets, script ]
    - !reference [ .template release-version, script ]
    - echo "Start Pipeline..."
    - RELEASE_VERSION=$(cat gradle.properties | grep "oldVersion" | cut -d "=" -f2 | tr -dc '0-9.')
    - echo $RELEASE_VERSION
    #- eval $(ssh-agent -s)
    #- ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
    #- ssh-add -l
    #- ssh -T -o StrictHostKeyChecking=no git@ssh.git.tech.rz.db.de
    #- git clone git@ssh.git.tech.rz.db.de:cnp/bbpneo/bbpneo-ops.git
    # AU
    #- cd bbpneo-ops/bbpneo-iat/deployment/
    #- export DEPLOY_TEMPLATE="${CI_PROJECT_NAME}/${CI_PROJECT_NAME}.yaml"
    #- RELEASE_VERSION_AU=$(yq '(.spec.generators.0.matrix.generators.0.list.elements.[] | select(.environment == "au") .releaseVersion)' $DEPLOY_TEMPLATE)
    - echo $RELEASE_VERSION_AU
    - curl -X POST -F token=$TRIGGER_TOKEN -F ref=Release-$RELEASE_VERSION_AU -F "variables[IMAGE_UPDATE]=true" -F "variables[DEPLOY_ENV]=\"au\"" -F "variables[STAGE_ENV]=\"au\"" -F "variables[PROJECT_RUNNER_TAG]=\"eks-abnahme\"" https://git.tech.rz.db.de/api/v4/projects/277423/trigger/pipeline
    # PROD
    #- cd ../../../bbpneo-ops/bbpneo-prod/deployment
    #- export DEPLOY_TEMPLATE="${CI_PROJECT_NAME}/${CI_PROJECT_NAME}-prod.yaml"
    #- RELEASE_VERSION_PROD=$(yq '.spec.source.helm.values' | grep 'releaseVersion' $DEPLOY_TEMPLATE | cut -d ":" -f2 | tr -dc '0-9.')'
    - echo $RELEASE_VERSION_PROD
    - curl -X POST -F token=$TRIGGER_TOKEN -F ref=Release-$RELEASE_VERSION -F "variables[IMAGE_UPDATE]=true" -F "variables[DEPLOY_ENV]=\"prod\"" -F "variables[STAGE_ENV]=\"prod\"" -F "variables[PROJECT_RUNNER_TAG]=\"eks-produktion\"" https://git.tech.rz.db.de/api/v4/projects/277423/trigger/pipeline

Find JAR:
  stage: find-jar
  extends: .Download-Artifacts
  <<: *job_template
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
  variables:
    ARTIFACTORY_PATH: "$MAVEN_REPO/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/Release-*/*/int/*.jar"
    TARGET_DIR: "artifacts"
    SECRETS:
      ARTIFACTORY_USER:RUNNER_ARTIFACTORY_USER,
      ARTIFACTORY_PASSWORD:RUNNER_ARTIFACTORY_PASSWORD
  before_script:
    - RELEASE_VERSION=$(cat gradle.properties | grep "version" | cut -d "=" -f2 | tr -dc '0-9.')
    - echo $RELEASE_VERSION
    - export ARTIFACTORY_PATH="$MAVEN_REPO/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/Release-$RELEASE_VERSION/*/int/*$RELEASE_VERSION.jar"
    - echo $ARTIFACTORY_PATH
  after_script:
    - RELEASE_VERSION=$(cat gradle.properties | grep "version" | cut -d "=" -f2 | tr -dc '0-9.')
    - echo $RELEASE_VERSION
    - find artifacts -name "*$RELEASE_VERSION.jar" -print -ls
    - mv -i $(find artifacts -name "*$RELEASE_VERSION.jar" -type f -exec ls -t1 {} + | head -1) artifacts
  artifacts:
    paths:
      - artifacts/*

Build Image STAGE:
  extends: .kaniko-build
  stage: build-image
  needs:
    - job: Find JAR
  <<: *job_template
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
  environment:
    name: ${DEPLOY_ENV}
  artifacts:
    paths:
      - artifacts/*
  variables:
    KANIKO_IMAGE_NAME: $CI_PROJECT_NAME
    KANIKO_SOURCE_REPO: ${PROD_DOCKER_REPO}
    KANIKO_IMAGE_TAG: "$CI_COMMIT_REF_NAME-$DEPLOY_ENV-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_CREATED_AT"
    SECRETS:
      CI_REGISTRY_USER:RUNNER_ARTIFACTORY_USER,
      CI_REGISTRY_PASSWORD:RUNNER_ARTIFACTORY_PASSWORD,
  before_script:
    - export KANIKO_IMAGE_TAG=$(echo $KANIKO_IMAGE_TAG | tr ':' '.')
    - echo $KANIKO_IMAGE_TAG
    - echo $IMAGE_UPDATE
    - echo $DEPLOY_ENV
    - echo $STAGE_ENV
    - echo $PROD_DOCKER_REPO
    - echo $CI_REGISTRY

Promote stage Artifactory:
  extends: .Stage-Artifacts
  stage: stage-artifacts
  <<: *job_template
  rules:
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
  variables:
    SOURCE_PATH: "$SOURCE_DOCKER_REPO"
    TARGET_PATH: "$TARGET_DOCKER_REPO"
    SOURCE_TAG: "$SOURCE_IMAGE_TAG"
    TARGET_TAG: "$TARGET_IMAGE_TAG"
    SECRETS:
      ARTIFACTORY_USER:RUNNER_ARTIFACTORY_USER,
      ARTIFACTORY_PASSWORD:RUNNER_ARTIFACTORY_PASSWORD
  before_script:
    - export ARTIFACT_NAME=$CI_PROJECT_NAME
    - export SOURCE_PATH=$DEV_DOCKER_REPO
    - export SOURCE_IMAGE_TAG=$(echo "$CI_COMMIT_REF_NAME-$DEPLOY_ENV-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_CREATED_AT" | tr ':' '.')
    - export SOURCE_TAG=$SOURCE_IMAGE_TAG
    - export TARGET_IMAGE_TAG=$(echo "$CI_COMMIT_REF_NAME-$DEPLOY_ENV-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_CREATED_AT" | tr ':' '.')
    - export TARGET_TAG=$TARGET_IMAGE_TAG
    - |
      if [ $DEPLOY_ENV == "au" ];
      then
        export TARGET_PATH=$AU_DOCKER_REPO
      fi
      if [ $DEPLOY_ENV == "prod" ];
      then
        export TARGET_PATH=$PROD_DOCKER_REPO
      fi
    - echo $ARTIFACT_NAME
    - echo $SOURCE_PATH
    - echo $TARGET_PATH
    - echo $ARTIFACTORY_URL
    - echo $ARTIFACTORY_USER
    - echo $OPTIONS
    - echo $SOURCE_IMAGE_TAG
    - echo $SOURCE_TAG
    - echo $TARGET_IMAGE_TAG
    - echo $TARGET_TAG
