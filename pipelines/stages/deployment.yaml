---
.job_template: &job_template
  tags:
    - $PROJECT_RUNNER_TAG

Deployment STAGE:
  stage: argo-cd-deploy
  rules:
    - if: ($DEPLOY_ENV == "dev-babedas" || $DEPLOY_ENV  == "int" || $DEPLOY_ENV  == "dev") && $CI_COMMIT_BRANCH && $IMAGE_UPDATE == "false"
      needs:
        - job: Trivy Check Image
        - job: Grant Check Image
        - job: Syft Check Image
        - job: Grype Check Image
        - job: Build Image Manifest
          artifacts: true
          optional: true
    - if: ($DEPLOY_ENV == "au" || $DEPLOY_ENV  == "lup" || $DEPLOY_ENV  == "prod") && $CI_COMMIT_BRANCH && $IMAGE_UPDATE == "false"
      needs:
        - job: Trivy Check Image
        - job: Grant Check Image
        - job: Syft Check Image
        - job: Grype Check Image
          artifacts: true
    - if: $IMAGE_UPDATE == "true" && $CI_COMMIT_BRANCH  =~ /^Release/
      needs:
        - job: Trivy Check Image
        - job: Grant Check Image
        - job: Syft Check Image
        - job: Grype Check Image
          artifacts: true
  image: ${PROD_DOCKER_REPO}.bahnhub.tech.rz.db.de/basis-pipeline-image:version-3.3-multiarch
  <<: *job_template
  dependencies:
    - Trivy Check Image
  variables:
    HTTP_PROXY: "http://webproxy.comp.db.de:8080"
    HTTPS_PROXY: "http://webproxy.comp.db.de:8080"
    NO_PROXY: ".amazon.com,.amazonaws.com,.aws.db.de,.cluster.local,.comp.db.de,.dbcs.db.de,.internal,.intranet-test.deutschebahn.com,.intranet.deutschebahn.com,.mail.db.de,.ose.db.de,.rz.db.de,.svc,.unix.db.de,10.193.0.1,127.0.0.1,169.254.169.254,dbcs-Maste-C6UND8OK4HFR-3e69d5b84ddd5126.elb.eu-central-1.amazonaws.com,ip-10-107-227-150.eu-central-1.compute.internal,localhost"
    http_proxy: "http://webproxy.comp.db.de:8080"
    https_proxy: "http://webproxy.comp.db.de:8080"
    no_proxy: ".amazon.com,.amazonaws.com,.aws.db.de,.cluster.local,.comp.db.de,.dbcs.db.de,.internal,.intranet-test.deutschebahn.com,.intranet.deutschebahn.com,.mail.db.de,.ose.db.de,.rz.db.de,.svc,.unix.db.de,10.193.0.1,127.0.0.1,169.254.169.254,dbcs-Maste-C6UND8OK4HFR-3e69d5b84ddd5126.elb.eu-central-1.amazonaws.com,ip-10-107-227-150.eu-central-1.compute.internal,localhost"
    SECRETS:
      SSH_PRIVATE_KEY:RUNNER_SSH_KEY
  retry: 2
  script:
    - !reference [ .template secrets, script ]
    # - echo $SSH_PRIVATE_KEY | tail -c 100
    # - echo $SSH_PRIVATE_KEY | base64 -d | tail -c 100
    ######################################################################################
    # install everything
    ######################################################################################
    - export ARGOCD_SERVER=argocd.cnp.comp.db.de
    # download cli from github
    # - mkdir -p /usr/local/bin/argocd
    # - wget -q -O /usr/local/bin/argocd/argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/v2.1.2/argocd-linux-amd64
    # - chmod +x /usr/local/bin/argocd
    ######################################################################################
    # setup ssh key for authentication in the shared-cluster-ops repo
    ######################################################################################
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    # - ssh-add <(echo "$SSH_PRIVATE_KEY")
    # - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d "\r")
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
    - ssh-add -l
    ################################################
    #- mkdir -p ~/.ssh
    #- echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    #- chmod og= ~/.ssh
    #- chmod og= ~/.ssh/config
    #- ls -al ~/.ssh
    #- cat ~/.ssh/config
    ################################################
    - echo $CI_COMMIT_SHORT_SHA;
    - export LOWERCASE_REF_NAME="$CI_COMMIT_REF_NAME-$DEPLOY_ENV-$CI_COMMIT_SHORT_SHA"
    - |
      if [ $IMAGE_UPDATE == "true" ];
      then
        PIPELINE_CREATED=$(echo "$CI_PIPELINE_CREATED_AT" | tr ':' '.')
        export LOWERCASE_REF_NAME="$LOWERCASE_REF_NAME-$PIPELINE_CREATED"
      fi
    # - export LOWERCASE_REF_NAME="$CI_COMMIT_REF_NAME-$DEPLOY_ENV-$CI_COMMIT_SHORT_SHA"
    - echo $LOWERCASE_REF_NAME
    ######################################################################################
    # update new tag in shared-cluster-ops repo
    ######################################################################################
    # clone shared-cluster-ops repo
    # https://git.tech.rz.db.de/cnp/bbpneo/bbpneo-ops.git
    - ssh -T -o StrictHostKeyChecking=no git@ssh.git.tech.rz.db.de
    - |
      echo $DEPLOY_ENV
      echo $CI_COMMIT_REF_NAME
      export RELEASE_VERSION=$(echo $CI_COMMIT_REF_NAME | cut -d "-" -f2)
      echo "RELEASE_VERSION: $RELEASE_VERSION"
      echo "DEPLOY_TEMPLATE: $DEPLOY_TEMPLATE"
      if [ $IS_CRONJOB != "true" ];
      then
        git clone git@ssh.git.tech.rz.db.de:cnp/bbpneo/bbpneo-ops.git
        if [ $DEPLOY_ENV == "prod" ];
        then
          cd bbpneo-ops/bbpneo-prod/deployment
          # use yq to replace the tag with the current commit hash
          # https://stackoverflow.com/questions/69648216/yq-issue-adding-yaml-into-yaml/69649872#69649872
          o="$(yq e '.spec.source.helm.values' $DEPLOY_TEMPLATE | yq e '.branch=strenv(LOWERCASE_REF_NAME)' -)" yq e -i '.spec.source.helm.values = strenv(o)' $DEPLOY_TEMPLATE
          o="$(yq e '.spec.source.helm.values' $DEPLOY_TEMPLATE | yq e '.releaseVersion=strenv(RELEASE_VERSION)' -)" yq e -i '.spec.source.helm.values = strenv(o)' $DEPLOY_TEMPLATE
        else
          cd bbpneo-ops/bbpneo-iat/deployment/
          # use yq to replace the tag with the current commit hash
          # https://stackoverflow.com/questions/69648216/yq-issue-adding-yaml-into-yaml/69649872#69649872
          yq -i '(.spec.generators.0.matrix.generators.0.list.elements.[] | select(.version == strenv(VERSION_ENV)) | .branch) |= strenv(LOWERCASE_REF_NAME)' $DEPLOY_TEMPLATE
          if [ $DEPLOY_ENV == "au" ];
          then
            yq -i '(.spec.generators.0.matrix.generators.0.list.elements.[] | select(.version == strenv(VERSION_ENV)) | .releaseVersion) |= strenv(RELEASE_VERSION)' $DEPLOY_TEMPLATE
          fi
        fi
        ls -al
        cat $DEPLOY_TEMPLATE | grep -q "#updated on" && current_timestamp=`date +%s` &&  sed -i "s/#updated on \(.*\)/#updated on $(date +%s)/g" $DEPLOY_TEMPLATE || echo "#updated on `date +%s`" >> $DEPLOY_TEMPLATE
        cat $DEPLOY_TEMPLATE
      else
        git clone git@ssh.git.tech.rz.db.de:cnp/bbpneo/02-ops/eks-deployment-helm-chart.git
        cd eks-deployment-helm-chart
        if [ $DEPLOY_ENV  == "dev" ];
        then
          export DEPLOY_TEMPLATE="helm-charts/values/bbpneo-dispatchercore-dev-babedas.yaml"
        fi
        if [ $DEPLOY_ENV == "int" ];
        then
          export DEPLOY_TEMPLATE="helm-charts/values/bbpneo-dispatchercore-int.yaml"
        fi
        if [ $DEPLOY_ENV == "au" ];
        then
          export DEPLOY_TEMPLATE="helm-charts/values/bbpneo-dispatchercore-au.yaml"
        fi
        if [ $DEPLOY_ENV == "lup" ];
        then
          export DEPLOY_TEMPLATE="helm-charts/values/bbpneo-dispatchercore-lup.yaml"
        fi
        if [ $DEPLOY_ENV == "prod" ];
        then
          export DEPLOY_TEMPLATE="helm-charts/values/bbpneo-dispatchercore-prod.yaml"
        fi
        echo $DEPLOY_ENV
        echo $DEPLOY_TEMPLATE
        yq e -i '.dispatcherCore.branch = strenv(LOWERCASE_REF_NAME)' $DEPLOY_TEMPLATE
        if [ $DEPLOY_ENV == "au" ] || [ $DEPLOY_ENV == "prod" ];
        then
          yq e -i '.dispatcherCore.releaseVersion = strenv(RELEASE_VERSION)' $DEPLOY_TEMPLATE
        fi
        cat $DEPLOY_TEMPLATE | grep -q "#updated on" && current_timestamp=`date +%s` &&  sed -i "s/#updated on \(.*\)/#updated on $(date +%s)/g" $DEPLOY_TEMPLATE || echo "#updated on `date +%s`" >> $DEPLOY_TEMPLATE
        cat $DEPLOY_TEMPLATE
      fi
    - git config --global user.email "bbpneo@pipeline.com"
    - git config --global user.name "bbpneo Pipeline"
    - git add $DEPLOY_TEMPLATE
    - git commit -m "update $DEPLOY_TEMPLATE"
    - git push
    ######################################################################################
    # trigger argocd sync
    ######################################################################################
    #    - export ARGOCD_AUTH_TOKEN=$ARGOCD_AUTH_TOKEN_PROJECT
    # wait until argocd application updated and did create all kubernetes manifests
    #- argocd app wait dpf-argocd-applications --grpc-web
    # wait another 30 seconds if not it sometimes does miss the point
    #- sleep 30s
    #- argocd app sync dpf-datanet-$env-artenkartierung-backend --grpc-web
    # wait until deployment completed
    #    - argocd app wait dpf-datanet-$env-artenkartierung-backend --grpc-web
    - |
      if [ -z "$SERVICE_URL" ];
      then
        echo "SERVICE_URL is empty"
        export SERVICE_URL="https://${CI_PROJECT_NAME}-${DEPLOY_ENV}.bbpneo-${DEPLOY_ENV}.svc.cluster.local:443/actuator/info"
      fi
      if [ $IS_CRONJOB != "true" ] && [ $IS_PYTHONJOB != "true" ];
      then
        echo "SERVICE_URL=$SERVICE_URL"
        GIT_COMMIT_ID_ABBREV=$(curl -Ss --insecure $SERVICE_URL | jq -R 'fromjson? | .git.commit.id.abbrev'  | tr -d \")
        GIT_GIT_COMMIT_SHORT=$CI_COMMIT_SHORT_SHA
        GIT_COMMIT_ID_7=${GIT_GIT_COMMIT_SHORT:0:7}
        echo $GIT_COMMIT_ID_ABBREV
        echo $GIT_COMMIT_ID_7
        while [ "$GIT_COMMIT_ID_ABBREV" != "$GIT_COMMIT_ID_7" ];
        do
          echo "sleep 10s"
          sleep 10
          echo "Start curl..."
          GIT_COMMIT_ID_ABBREV=$(curl -Ss --insecure $SERVICE_URL | jq -R 'fromjson? | .git.commit.id.abbrev'  | tr -d \")
          echo $GIT_COMMIT_ID_ABBREV
          echo $GIT_COMMIT_ID_7
        done
      fi
    - echo "Ready..."
